* Notes
** Generating an iso
*** Json
    var sample = {
      name: 'string',
      arch: 'string' <- i686|x86_64
      mkinitcpio: {
        modules: [m1, m2, m3, ... mn],
        binaries: [b1, b2, b3, ... bn],
        files: [f1, f2, f3, ... fn],
        hooks: [h1, h2, h3, ... hn],
        compression: 'string' <- gzip|bzip2|lzma
      },
      packages: [p1, p2, p3, ... pn],
      addons: [{
        type: 'string' <- squashfs|bind,
        files: [f1, f2, f3, ... fn]
      }]
    }
**** Default data
     var default = {
       name: 'voussoir-test',
       arch: 'i686',
       mkinitcpio: {
         hooks: [
           'base', 'udev', 'archiso', 'archiso_pxe_nbd', 'pata', 'scsi', 'sata',
           'usb', 'fw', 'pcmcia', 'filesystems', 'usbinput'
         ]
       },
       packages: ['base', 'kernel26', 'emacs-nox'],
       addons: [{
         type: bind|squashfs
     }
*** archiso expects
     + packages :: file, one package per line
     + addons :: single directory with an fstab 'config' file. can be either:
                 + squashfs:
                   - stick everything in a dir
                   - run mksquashfs
                   - copy image into addons directory
                   - add to config "image_rel_addons    mountpoint    squashfs"
                     for squashfs, mountpoint will always be /
                   - order matters! later entries mounted UNDER earler entries
                 + plain directory:
                   - stick everything in a dir
                   - copy it into addons dir
                   - add to config "dir_rel_addons    mountpoint    bind"
*** build steps
    clean chroot takes ~400MB. max space usage is around 2GB
    + copy archiso source directory, modify files in configs/syslinux-iso
    + cd configs/syslinux-iso
    + make
    
** node.js
   utf8, ascii, and binary encodings. use ascii or binary when possible.

   require("child_process").spawn()

   require("fs")
     + async fs methods have no guaranteed ordering

   net.stream net.server, http
*** require
   require('builtin')
   require('./rel/path')
   requare('/abs/path')
*** modules
    [[http://nodejs.org/api.html#_modules][api reference]]
    node uses the [[http://commonjs.org/specs/modules/1.0/][CommonJS modules spec]]
**** example
    var foo = 'Foo'; //not exported
    exports.foo = function() {  // foo getter
      return foo;
    };
    exports.bar = function(bar) {
      return foo + bar;
    };
**** example include
     var foobar = require("./foobar"),
     sys = require('sys');

     sys.puts("Foobar: " + foobar.bar("bar"));

* Bugs/issues
** iso generation
*** Mon Sep 27 08:10:21 EDT 2010 ::
    * generating the iso the way it's done now requires synchronous execution of
      pacman, which doesn't work because it uses a lock file. solutions:
        + see if we can tell pacman to ignore the lock. this _should_ be safe,
          we're always installing into a new environment. might not be though, and
          it may be difficult to get pacman to ignore the lock, it's there for a
          reason
        + use a queue and generate isos one-by one. works, and avoids the
          eventual problem we'll have with trying to do too much generation at
          once. we don't want to do all this FIFO-style though, it would be better
          to implement some n-at-once stuff later, which would bring us back to
          square one.
        + instead of using the archiso plain make in the already-made directory
          they provide, put only what we need/want in the chroot, and make sure
          that's what we're running from (we'll have to install pacman by
          script/etc). This is the most work, but is probably the way to go (see
          other issue below)
    * the archiso script pulls lots over the network. we can not afford
      this. the only immediately obvious solution is to do some local caching,
      and only pull what we need over the network.
        * when a user requests a new package, keep it locally until it hasn't
          been requested again for x days (or we're running out of space). 
        * same thing with pacman versions / other base data we need.
       

        
